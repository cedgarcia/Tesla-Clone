{"version":3,"sources":["logo.svg","features/car/carSlice.js","components/Header.js","components/Section.js","components/Home.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["carSlice","createSlice","name","initialState","cars","reducers","selectCars","state","car","Header","useState","burgerStatus","setBurgerStatus","useSelector","console","log","HeaderWrapper","src","alt","map","index","href","NavMenu","BurgerMenu","onClick","BurgerNav","show","CloseWrapper","CloseMenu","styled","div","Menu","MenuIcon","props","CloseIcon","Section","title","description","leftBtnText","rightBtnText","backgroundImg","Sections","bgImg","HeroText","Buttons","ButtonGroup","LButton","RButton","DownArrow","img","Home","Container","App","className","store","configureStore","reducer","carReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c6bc319.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.b2e5a01e.svg\";","import { createSlice } from '@reduxjs/toolkit'\n\n\nconst initialState = {\n  cars: ['Model S', 'Model 3', 'Model X', 'Model Y']\n}\n\nconst carSlice = createSlice({\n  name: 'car',\n  initialState,\n  reducers:{}\n})\n\nexport const selectCars = state => state.car.cars\n\nexport default carSlice.reducer\n","import React, {useState} from 'react'\nimport styled from 'styled-components'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { selectCars } from '../features/car/carSlice'\nimport { useSelector } from 'react-redux'\n\n\nfunction Header() {\n\n  const [burgerStatus, setBurgerStatus] = useState(false);\n  const cars = useSelector(selectCars)\n  console.log(cars)\n\n  return (\n    <HeaderWrapper>\n      <a>\n        <img src = '/images/logo.svg' alt= ''/>\n      </a>\n\n      <Menu>\n\n        {cars && cars.map((car, index)=>(\n          <a key= {index} href = '#'>{ car }</a>\n        ))}\n        {/* <a href='#'>Model S</a>\n        <a href='#'>Model 3</a>\n        <a href='#'>Model X</a>\n        <a href='#'>Model Y</a> */}\n        <a href='#'>Solar Roof</a>\n        <a href='#'>Solar Panels</a>\n      </Menu>\n\n      <NavMenu>\n        <a href='#'>Shop</a>\n        <a href='#'>Tesla Account</a>\n        <BurgerMenu onClick= {()=> setBurgerStatus(true)}/>\n        <BurgerNav show= {burgerStatus}>\n          <CloseWrapper>\n            <CloseMenu  onClick = {()=> setBurgerStatus(false)}/>\n          </CloseWrapper>\n          {cars && cars.map((car, index)=>(\n          <a key= {index} href = '#'>{ car }</a>\n        ))}\n          <li><a href = '#'>Existing Inventory</a></li>\n          <li><a href = '#'>Used Inventory</a></li>\n          <li><a href = '#'>Trade-In</a></li>\n          <li><a href = '#'>Test Drive</a></li>\n          <li><a href = '#'>Cybertruck</a></li>\n          <li><a href = '#'>Roadster</a></li>\n          <li><a href = '#'>Semi</a></li>\n          <li><a href = '#'>Charging</a></li>\n          <li><a href = '#'>Powerwall</a></li>\n          <li><a href = '#'>Commercial Energy</a></li>\n          <li><a href = '#'>Utilies</a></li>\n          <li><a href = '#'>Find Us</a></li>\n          <li><a href = '#'>Support</a></li>\n          <li><a href = '#'>Investor Relations</a></li>\n        </BurgerNav>\n      </NavMenu>\n\n\n    </HeaderWrapper>\n  )\n}\n\nexport default Header\n\n\nconst HeaderWrapper = styled.div`\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 2rem;\n  top:0;\n  left: 0;\n  right: 0;\n  z-index: 2;\n  \n`\nconst Menu = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  @media(max-width: 768px) {\n    display: none;\n  }\n  a {\n    font-weight: 600;\n    padding: 0 .8rem;\n    flex-wrap: nowrap;\n    text-transform: uppercase;\n  }\n\n`\n\nconst NavMenu = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  a {\n    font-weight: 600;\n    padding: 0 1rem;\n    flex-wrap: nowrap;\n   \n  }  \n`\n\nconst BurgerMenu = styled(MenuIcon)`\n  cursor: pointer;\n\n`\n\nconst BurgerNav = styled.div `\n  background-color: white;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  width: 280px;\n  z-index: 100;\n  height: 100vh;\n  transform: ${props => props.show ? 'translateX(0)': 'translateX(100%)'} ;\n  transition: transform .2s ease-in; \n  li {\n    padding: 15px 0;\n    border-bottom: 1px solid rgba(0, 0, 0, .2);\n  }\n  a {\n    font-weight:600;\n  }\n\n`\n\nconst CloseMenu = styled(CloseIcon)`\n  cursor: pointer;\n  \n`\nconst CloseWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  padding: 2rem 0;\n  padding-right: 2rem;\n`","import React from 'react'\nimport styled from 'styled-components'\n\n\nconst Section = ({ title, description, leftBtnText, rightBtnText, backgroundImg })=> {\n  // console.log(props)\n  return (\n    <Sections bgImg = { backgroundImg }>\n      <HeroText>\n        <h1>{ title }</h1>\n        <p>{ description }</p>\n      </HeroText>\n\n      <Buttons>\n        <ButtonGroup>\n          <LButton>{ leftBtnText }</LButton>\n          { rightBtnText &&\n            <RButton>{ rightBtnText }</RButton>\n          }\n\n        </ButtonGroup>\n\n        <DownArrow src = './images/down-arrow.svg'/>\n      </Buttons>\n    </Sections>\n  )\n}\n \nexport default Section\n\nconst Sections = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(/images/model-s.jpg) no-repeat center;\n  background-size: cover;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  background-image: ${ props => `url('/images/${ props.bgImg }')`};\n  z-index: 2;\n\n`\nconst HeroText = styled.div`\n  color: red;\n  // background-color: red ;\n  text-align: center;\n  padding: 15vh;\n`\n\n\nconst ButtonGroup =styled.div`\n  display: flex;\n  margin-bottom: 1rem;\n  @media(max-width: 768px) {\n    flex-direction: column;\n\n  }\n`\n\nconst LButton = styled.div`\n  background-color: rgba(23, 26, 32, 0.85); \n  margin: 0 1.3rem;\n  height: 48px;\n  width:256px;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;   \n  border-radius: 100px;\n  opacity: 0.75; \n  text-transform: uppercase;\n  font-size: 12px ;\n  cursor: pointer;\n  @media(max-width: 768px) {\n    margin-bottom: 1rem; \n  }\n  z-index: 2;\n`\nconst RButton = styled(LButton)`\n  background-color: white;\n  color: black;\n  \n`\n\nconst DownArrow = styled.img`\n  margin-top:1rem;\n  height: 40px;\n  animation: animateDown infinite 1.5s;\n  width: 100%;\n\n`\n\nconst Buttons = styled.div`\n  margin-bottom: 1rem;\n  z-index: 1;\n`","import React from 'react'\nimport styled from 'styled-components'\nimport Section from './Section'\nfunction Home() {\n  return (\n    <Container>\n\n      <Section\n        title='Model S'\n        description='Order Online for Touchless Delivery'\n        backgroundImg='model-s.jpg'\n        leftBtnText='Custom order'\n        rightBtnText='Existing inventory'\n        \n      />\n      <Section\n        title='Model Y'\n        description='Order Online for Touchless Delivery'\n        backgroundImg='model-y.jpg'\n        leftBtnText='Custom order'\n        rightBtnText='Existing inventory'\n      />\n\n      \n     < Section\n        title='Model 3'\n        description='Order Online for Touchless Delivery'\n        backgroundImg='model-3.jpg'\n        leftBtnText='Custom order'\n        rightBtnText='Existing inventory'\n \n\n     />\n      <Section\n         title='Modal X'\n         description='Order Online for Touchless Delivery'\n         backgroundImg='model-x.jpg'\n         leftBtnText='Custom order'\n         rightBtnText='Existing inventory' \n      />\n\n      <Section\n        title='Solar Panels'\n        description='Lowest Cost Solar Panels in America'\n        backgroundImg='solar-panel.jpg'\n        leftBtnText='Order Now'\n        rightBtnText='Learn More'   \n      \n      \n      />\n\n      <Section\n        title='Solar Roof'\n        description='Produce Energy From Your Roof'\n        backgroundImg='solar-roof.jpg'\n        leftBtnText='Order Now'\n        rightBtnText='Learn More'   \n      \n      \n      />\n\n      <Section\n        title='Accessories'\n        // description='Lowest Cost Solar Panels in America'\n        backgroundImg='accessories.jpg'\n        leftBtnText='Shop Now'\n        // rightBtnText='Learn More'   \n      \n      \n      />\n\n\n\n\n    </Container>\n  )\n}\n\nexport default Home\n\n\n// Styled Components\nconst Container = styled.div`\n  height: 100vh;\n\n`","import React from 'react';\nimport logo from './logo.svg';\n// import { Counter } from './features/counter/Counter';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Home from \"./components/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport carReducer from '../features/car/carSlice'\n\n\nexport const store = configureStore({\n  reducer: {\n    car:carReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}